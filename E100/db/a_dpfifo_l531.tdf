--a_dpfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=64 LPM_SHOWAHEAD="OFF" lpm_width=35 lpm_widthu=6 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" clock data empty full q rreq sclr wreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone II" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 15.0 cbx_altdpram 2015:05:27:19:36:47:SJ cbx_altsyncram 2015:05:27:19:36:47:SJ cbx_cycloneii 2015:05:27:19:36:47:SJ cbx_fifo_common 2015:05:27:19:36:46:SJ cbx_lpm_add_sub 2015:05:27:19:36:47:SJ cbx_lpm_compare 2015:05:27:19:36:47:SJ cbx_lpm_counter 2015:05:27:19:36:47:SJ cbx_lpm_decode 2015:05:27:19:36:47:SJ cbx_lpm_mux 2015:05:27:19:36:47:SJ cbx_mgl 2015:05:27:21:40:41:SJ cbx_scfifo 2015:05:27:19:36:47:SJ cbx_stratix 2015:05:27:19:36:47:SJ cbx_stratixii 2015:05:27:19:36:47:SJ cbx_stratixiii 2015:05:27:19:36:47:SJ cbx_stratixv 2015:05:27:19:36:47:SJ cbx_util_mgl 2015:05:27:19:36:47:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION a_fefifo_c6e (aclr, clock, rreq, sclr, wreq)
RETURNS ( empty, full);
FUNCTION dpram_0411 (data[34..0], inclock, outclock, outclocken, rdaddress[5..0], wraddress[5..0], wren)
RETURNS ( q[34..0]);
FUNCTION cntr_1ob (aclr, clock, cnt_en, sclr)
RETURNS ( q[5..0]);

--synthesis_resources = lut 18 M9K 1 reg 20 
SUBDESIGN a_dpfifo_l531
( 
	clock	:	input;
	data[34..0]	:	input;
	empty	:	output;
	full	:	output;
	q[34..0]	:	output;
	rreq	:	input;
	sclr	:	input;
	wreq	:	input;
) 
VARIABLE 
	fifo_state : a_fefifo_c6e;
	FIFOram : dpram_0411;
	rd_ptr_count : cntr_1ob;
	wr_ptr : cntr_1ob;
	aclr	: NODE;
	rd_ptr[5..0]	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;

BEGIN 
	fifo_state.aclr = aclr;
	fifo_state.clock = clock;
	fifo_state.rreq = rreq;
	fifo_state.sclr = sclr;
	fifo_state.wreq = wreq;
	FIFOram.data[] = data[];
	FIFOram.inclock = clock;
	FIFOram.outclock = clock;
	FIFOram.outclocken = (valid_rreq # sclr);
	FIFOram.rdaddress[] = ((! sclr) & rd_ptr[]);
	FIFOram.wraddress[] = wr_ptr.q[];
	FIFOram.wren = valid_wreq;
	rd_ptr_count.aclr = aclr;
	rd_ptr_count.clock = clock;
	rd_ptr_count.cnt_en = valid_rreq;
	rd_ptr_count.sclr = sclr;
	wr_ptr.aclr = aclr;
	wr_ptr.clock = clock;
	wr_ptr.cnt_en = valid_wreq;
	wr_ptr.sclr = sclr;
	aclr = GND;
	empty = fifo_state.empty;
	full = fifo_state.full;
	q[] = FIFOram.q[];
	rd_ptr[] = rd_ptr_count.q[];
	valid_rreq = (rreq & (! fifo_state.empty));
	valid_wreq = (wreq & (! fifo_state.full));
END;
--VALID FILE
